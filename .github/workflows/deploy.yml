name: CI/CD Docker

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      DOCKER_IMAGE_NAME: ${{ steps.set_image_name.outputs.DOCKER_IMAGE_NAME }}
      DOCKER_IMAGE_TAG: ${{ steps.set_image_name.outputs.DOCKER_IMAGE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set lower-case image name and tag
        id: set_image_name
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "DOCKER_IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ steps.set_image_name.outputs.DOCKER_IMAGE_NAME }}:${{ steps.set_image_name.outputs.DOCKER_IMAGE_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # This script will install Docker and Docker Compose if they are not found.
            # IMPORTANT: The SSH user ('${{ secrets.SSH_USERNAME }}') must have passwordless sudo configured on the server.

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
                echo "Docker not found. Installing..."
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            fi

            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
                echo "Docker Compose not found. Installing..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            # --- Application Deployment ---
            APP_DIR=~/app
            REPO_URL=${{ github.event.repository.html_url }}

            mkdir -p $APP_DIR
            cd $APP_DIR

            # Always download the latest docker-compose.yml to avoid mismatches
            echo "Downloading latest docker-compose.yml..."
            curl -f -L -o docker-compose.yml $REPO_URL/raw/main/docker-compose.yml

            # Check if CR_PAT secret is set
            if [ -z "${{ secrets.CR_PAT }}" ]; then
              echo "Error: The CR_PAT secret is not set in the GitHub repository."
              exit 1
            fi

            # Log in to GitHub Container Registry
            echo "Logging in to GitHub Container Registry..."
            echo ${{ secrets.CR_PAT }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            if [ $? -ne 0 ]; then
              echo "Error: Docker login failed. Check if CR_PAT is a valid Personal Access Token with read:packages scope."
              exit 1
            fi
            echo "Login successful."

            # Set environment variables for docker-compose
            # NOTE: You must set POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB,
            # SECRET_KEY, and optionally S3/AWS secrets in your GitHub repository secrets.
            export DOCKER_IMAGE_NAME=ghcr.io/${{ needs.build-and-push.outputs.DOCKER_IMAGE_NAME }}
            export DOCKER_IMAGE_TAG=${{ needs.build-and-push.outputs.DOCKER_IMAGE_TAG }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export SECRET_KEY=${{ secrets.SECRET_KEY }}
            export STORAGE_TYPE=${{ secrets.STORAGE_TYPE }}
            export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}

            # Use 'sudo -E' to preserve environment variables and pull the images
            echo "Pulling Docker images..."
            sudo -E docker-compose pull
            if [ $? -ne 0 ]; then
              echo "Error: docker-compose pull failed. Check image name and permissions."
              exit 1
            fi

            # Start the services
            echo "Starting services with docker-compose..."
            sudo -E docker-compose up -d